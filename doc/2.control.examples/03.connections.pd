#N canvas 0 23 1280 687 12;
#X floatatom 77 481 0 0 0 0 - - -;
#X floatatom 190 482 0 0 0 0 - - -;
#X floatatom 77 388 0 0 0 0 - - -;
#X floatatom 553 161 0 0 0 0 - - -;
#X floatatom 599 162 0 0 0 0 - - -;
#X obj 553 135 +;
#X floatatom 553 105 0 0 0 0 - - -;
#X obj 599 136 +;
#X floatatom 26 109 0 0 0 0 - - -;
#X floatatom 26 17 0 0 0 0 - - -;
#X floatatom 48 41 0 0 0 0 - - -;
#X obj 26 85 +;
#X text 3 64 hot;
#X text 53 66 cold;
#X text 232 105 Here's the downside: drag this--->;
#X text 551 180 good;
#X text 600 181 bad;
#X obj 77 457 *;
#X obj 190 458 -;
#X text 16 481 square;
#X text 230 483 first difference;
#X text 412 526 updated for Pd version 0.33;
#X text 20 514 Trigger takes any number of "bang" and "float" arguments
(among others) and copies its input to its outlets \, in the requested
forms \, in right-to-left order. Hook it to two inputs without crossing
the wires and you get the expected result. Cross the wires and you
get a memory effect.;
#X text 9 136 In Pd you must sometimes think about what order an object
is going to get its messages in. If an outlet is connected to more
than one inlet it's undefined which inlet will get the cookie first.
I've rigged this example so that the left-hand side box gets its inputs
in the good \, right-to-left order \, so that the hot inlet gets hit
when all the data are good. The "bad adder" happens to receive its
inputs in the wrong order and is perpetually doing its addition before
all the data are in. There's an object that exists solely to allow
you to control message order explicitly:;
#X text 114 16 In Pd \, most objects carry out their functions when
they get messages in their leftmost inlets \, and their other inlets
are for storing values that can modify the next action. Here \, the
"+" object does its thing only when the left-hand input changes.;
#X obj 77 411 t f f;
#N canvas 875 210 450 300 pulseGen1 0;
#X obj 198 -36 loadbang;
#X msg 200 16 1;
#X obj 201 56 metro 1250;
#X obj 262 19 random 1250;
#X obj 194 182 outlet;
#X obj 202 97 random 322;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 5 0 4 0;
#X restore -2 -12 pd pulseGen1;
#N canvas 875 210 450 300 pulseGen2 0;
#X obj 198 -36 loadbang;
#X msg 200 16 1;
#X obj 201 56 metro 1250;
#X obj 262 19 random 1250;
#X obj 194 182 outlet;
#X obj 202 97 random 322;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 5 0 4 0;
#X restore 114 -20 pd pulseGen2;
#N canvas 875 210 450 300 pulseGen3 0;
#X obj 198 -36 loadbang;
#X msg 200 16 1;
#X obj 201 56 metro 1250;
#X obj 262 19 random 1250;
#X obj 194 182 outlet;
#X obj 202 97 random 322;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 5 0 4 0;
#X restore 576 41 pd pulseGen3;
#N canvas 875 210 450 300 pulseGen4 0;
#X obj 198 -36 loadbang;
#X msg 200 16 1;
#X obj 201 56 metro 1250;
#X obj 262 19 random 1250;
#X obj 194 182 outlet;
#X obj 202 97 random 322;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 5 0 4 0;
#X restore 76 357 pd pulseGen4;
#X connect 2 0 25 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 6 0 7 1;
#X connect 6 0 5 1;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 9 0 11 0;
#X connect 10 0 11 1;
#X connect 11 0 8 0;
#X connect 17 0 0 0;
#X connect 18 0 1 0;
#X connect 25 0 17 0;
#X connect 25 0 18 1;
#X connect 25 1 17 1;
#X connect 25 1 18 0;
#X connect 26 0 9 0;
#X connect 27 0 10 0;
#X connect 28 0 6 0;
#X connect 29 0 2 0;
