<!DOCTYPE html>

<HTML>
  <HEAD>
  <meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	 <TITLE>Pd Documentation 4</TITLE>
    <meta http-equiv="Content-Type" content="text/html">
	 <link rel="stylesheet" type="text/css" href="pdmanual.css" media="screen">
  </HEAD>


<BODY>

<H2>Pd Documentation chapter 4: externals</H2>

<P>
<A href="index.htm#s4"> back to table of contents </A>
<BR><BR>
</P> 


<H3> <A id=s1> 4. External Objects & Libraries </A> </H2>

<H3> <A id=s1.1> 4.1. What are: Vanilla Objects, Internals & Externals? </A> </H3>

<p> Basically, internals are the objects that come as part of the Pd Vanilla (the main binary distribution of Pure Data, provided by Miller Puckette : <a href="http://msp.ucsd.edu/software.html">http://msp.ucsd.edu/software.html </a>)
, whereas external objects are not! Besides internals, the Pd Vanilla
distribution also comes with a few "extra" objects that are not part of its
binary. Therefore, Vanilla objects (the built-in objects in Pd) include internals
and externals.

<p> Nonetheless, "externals" most commonly refer to objects that do not
available in the Pd Vanilla distribution, meaning that usually you have to
download these objects and install them properly so they can be loaded into
Pd patches.


<p><img src=fig4.1.png >

<p class=fig><i>Figure 4.1 - Excerpt from list of Vanilla objects (help-intro.pd file)</i>

<p> To get a full list of all objects in Pd Vanilla, go to the <b>Help</b> menu and
then select <b>List of Objects</b>, or alternatively right click on an empty spot of a
patch's window and select "help" - this loads the help-intro.pd file.

<p><img src=fig4.2.png >
<p class=fig><i>Figure 4.2 - Extra objects from Pd Vanilla</i>

<p> The extra objects, which reside in a folder named "extra" inside the Pd
application, are presented at the very end of the "help-intro.pd". They can
also be viewed in the Help Browser menu (Help => Browser). See Figure 4.2
above, which shows how the browser looks in a fresh install of Pd and lists
the objects in the extra folder.

<H3> <A id=s1.2> 4.1.2. What are the Types of External Objects? </A> </H3>

<p> An object in Pd can be either a patch - meaning a Pd file (a.k.a
abstraction) - or a compiled binary (note that a binary can contain only one or
several external objects, as discussed further on). More details about these
two possible types below.

<H3> <A id=s1.2.1> 4.1.2.1. Compiled objects: </A> </H3>

<p> These are Pd objects compiled to binaries from programming code (like
in C or C++). They have to be compiled for your operating system, which
means the binaries have different extensions according to each platform. For
instance:

 
	<UL>
	<LI> <b>.pd_darwin</b>: macOS binary extension
	<LI> <b>.dll</b>: Windows binary extension
	<LI> <b>.pd_linux</b>: Linux binary extension 
	
	</UL>
	
<H3> <A id=s1.2.2> 4.1.2.2. Abstractions:</A> </H3>

<p>You can save pd patches and make them behave like objects by
loading them into your patches, these are usually called "Abstractions". Note
that some of the "extra" objects from Vanilla that you can see in <i>Figure 4.2</i> are
Pd files/patches. Note that abstractions, like any other Pd file, may contain
any kind of objects (internals, compiled externals and even other
abstractions).



<H3> <A id=s1.3> 4.1.3. What are External Libraries? </A> </H3>

<p>In practical terms, an external library is a collection of external objects of any kind (abstractions or compiled objects). But when it comes to compiled objects, a library can provide several objects as a <b>single binary pack</b> or as a <b>set of
separate binaries</b> (where each object has its own binary).

<p>The "classic" library is a single binary pack (with two or more externals), but splitting into separate binaries became very common. A single external binary (not part of any set of objects) is still technically a library with just one object, and a library with separate binaries could be considered as a set of libraries. But again, in practical terms, the more general concept of a library is that it is just a set of objects. What’s important to note is that there are significant differences for loading externals wether if they are a single binary pack or a set of separate binaries (as we’ll see in this tutorial later on).

<H3> <A id=s1.4> 4.1.4. What are the types of External Libraries? </A> </H3>

<p>Libraries can come in all sorts of ways; as only a collection of
abstractions (like "list-abs"), only compiled objects, or both. It can even mix
compiled externals both as a <b>set of separate binaries</b> and a <b>single binary
pack</b>. Basically, any combination is possible for a set of external.

<p>One example that combines all external options is <i>cyclone 0.3</i>, which
provides most of its objects as a <b>set of separate binaries</b>, but also includes
a small collection of 12 objects as a <b>single binary pack</b> plus a few
abstractions.

<H3> <A id=xx1>Wrapping up Part 1)</A> </H3>
<UL>

	<LI> <b>Internal objects:</b> Objects that are part of Pd Vanilla's binary.
	<LI> <b>External objects:</b> Objects that are <u>NOT</u> part of Pd Vanilla's binary.
	<LI> <b>Vanilla objects:</b> Built-in objects in the Pd Vanilla distribution
(including internals and a small collection of externals - the "extra" objects).
	<LI> <b>Types of external objects:</b> Compiled binaries or Abstractions.
	<LI> <b>External Library:</b> Collection of external objects in any form, be it a
<u>single binary pack</u> containing several objects, a <u>set of separate binaries</u> /
abstractions or any combination of them.
</UL>
<br>
<br>
<hr>





<H3> <A id=s2>4.2. Writing Pd objects in C </A> </H3>

<P>You can write your own objects that you and others can use in their Pd
applications.  You can write them in C or (if you're smart and brave) in C++ or
FORTRAN. 

<P> HOW EXTERNS ARE LOADED 

<P> Whenever you type the name of an object
(into an "object" text box) that Pd doesn't yet know about, Pd looks for a
relocatable object file, named, for instance, "profile.pd_irix5".  Pd looks
first in the directory containing the patch, then in directories in its
"path."  Pd will then add whatever object is defined there to its "class list,"
which is the set of all Pd classes you can use.  If all this works, Pd then
attempts again to create the object you asked for, this time perhaps
successfully.  There is no difference between an object defined this way and an
object built into Pd.

<P> Once you load a new object into Pd, it's there for the duration of your Pd
session.  If you load another Pd document which supplies a different version of
some Pd object, the object won't be updated.  IF you're working on a new object
and decide to change it, you have to exit and re-enter Pd to get the change to
take.

<P> In the "externs" subdirectory of the documentation you
can find simple examples of "externs" with their source code and test patches;
there are many other on the web (see <a href="x1.htm#s2">section 1.2 </A>).

<P> IOhannes zm&ouml;lnig has written an excellent guide to writing externs at
<A href="http://pdstatic.iem.at/externals-HOWTO/">
         http://pdstatic.iem.at/externals-HOWTO/</A> .
		 
		 
		 
<hr>		 
		 
<H3> <A id=s3>4.3. Installing External Objects and Libraries </A> </H3>

<p>Installing externals in Pd is quite simple, all you need to do is download
your externals from somewhere, such as from Pd Vanilla directly, and include
them in a proper folder.

<H3> <A id=s3.1>4.3.1. Where to include the externals?</A> </H3>

<p>You can have externals basically anywhere in your computer, but Pd
must know where to look for them. Since Pd 0.48, Pd can automatically
create a documents directory for patches and external libraries. At launching
Pd for the first time, it asks you to create this folder, which is the current best
practice. This automatically includes the folder in the search paths (under
Preferences => Path).

<p><img src=fig4.3.png >

<p class=fig><i>Figure 4.3 - Preferences => Path window</i>

<p>If you accept that Pd creates that folder for you, you should have
something like this in a fresh install of Pd under Preferences => Path. This is
for macOS, where the "Pd" folder is created under ~/Documents, and inside it
we have a folder for externals. Even if you did not create this folder, here is
where you can create it by clicking the "Reset" button under "Pd Documents
Directory".

<p>Pd can actually search for externals anywhere, they just need to be
included in the search paths. Nontheless, Pd also has other places it can
search for externals. This can be the same folder that your patch is saved on
(the <u>Relative Path</u>) or the <u>Standard Paths</u>, which are:
<UL>
	<LI>A) <u>Application-specific</u>: The "extra" folder inside a particular Pure Data
application.
	<LI>B) <u>User-specific</u>: A system folder for a specific user in the machine.
	<LI>C) <u>Global</u>: A system folder for all users on the machine.
</UL>

<p>The Standard Paths are not listed in Preferences => Path, as those
only include paths added by the user. And again, the current best practice is
to have external folders inside an external folder added to Pd search paths
(as ~/Documents/Pd/externals). Earlier practices made use of these standard
paths above, but note that the user-specific and global standard paths are not
automatically created by Pd.

<p>This structure is still kept as an old heritage of Pd and is documented
here because of that. It may also serve some edge cases. The <u>Global</u> folder
affects all Pure Data Applications for all users. The <u>User-specific</u> folder affects
all Pure Data Applications for that user. And since you can have different
versions of Pd installed in your system, the <u>Application-specific</u> folder affects
only that particular Pd Application. This can be not only an older and a newer
version of Pd, but also both 32-bit and 64-bit versions. For reference, here's
the list of the Standard Paths for all operating systems:

<p>A) macOS:
<UL>
	<LI><u>Application-specific</u>: <mark><b>/$PdPath/Contents/Resources/extra</b></mark> - this is
inside the Pd Application (like Pd-0.49-1 in ~/Applications); right click it and
choose "Show Package Contents", then navigate to "Resources/extra".
	<LI><u>User-specific</u>: <mark><b>~/Library/Pd</b></mark> (/Users/user_name/Library/Pd)
	<LI><u>Global</u>: <mark><b>/Library/Pd</b></mark>

</UL>

<p>B) Windows:
<UL>
	<LI><u>Application-specific</u>: <mark><b> %ProgramFiles(x86)%\Pd\extra</b></mark> (for 64-bit
OS and 32-bit Pd) or %ProgramFiles%\Pd\extra; this is
inside the Pd Application (usually in C:\Program Files).
This folder needs to be set to writeable.
	<LI><u>User-specific</u>: <mark><b> %AppData%\Pd</b></mark>
(usually in C:\Users\user_name\AppData\Roaming\Pd).
	<LI><u>Global</u>: <mark><b> %CommonProgramFiles%\Pd</b></mark>
(usually in C:\Program Files\Common Files\Pd).

</UL>

C) GNU/Linux:

<UL>

	<LI><u>Application-specific</u>: <mark><b> /usr/lib/pd/extra</b></mark> if installed via a package
manager (apt-get) or /usr/local/lib/pd/extra if compiled by yourself.
	<LI><u>User-specific</u>: <mark><b> ~/.local/lib/pd/extra</b></mark> (preferred since version Pd-0.47-1)
or ~/pd-externals (deprecated but still usable).
	<LI><u>Global</u>: <mark><b> /usr/local/lib/pd-externals</b></mark>.
</UL>

<H3> <A id=s3.2>4.3.2. How to Download Externals from Pd Vanilla?</A> </H3>

<p>Since version 0.47-0, Pd Vanilla has its own external manager! This is a
built in .tcl plug-in named "deken" <https://github.com/pure-data/deken> that
has been incorporated into the Pd Vanilla distribution to manage the
download of external libraries and externals.

<p>So you can just open Pd, click on the "Help" menu and select <b>Help >
Find externals</b>. Then you can just type the library's name you want and hit
enter or click "search". You can also look for an external name and the library
that contains it might be shown. All available versions of the library specific for
your operating system will be shown to you. See figure below.

<p><img src=fig4.4.png >
<p class=fig><i>Figure 4.4 - Searching for External Libraries from Pd Vanilla</i>

<p>When you click on the version you want, by default, Pd asks if you want
to download it to the external folder set under Preferences => Path. If you say
no, you can specify somewhere else to download it to. If you say yes, there is
where it gets downloaded to.
<br>
<br>
<hr>
<H3> <A id=s4>4.4. Loading Externals </A> </H3>

<p>The current best practice is to use the [declare] object, but there are
alternatives. If the library is a single binary pack, it needs to be loaded so you
can create externals. This is done either via the [declare] object or manually
via Preferences => Startup.

<p>Now, if the external library only contains abstractions or objects
compiled as a set of separate binaries, Pd just needs to know its. Again, this
can be done with [declare] or manually (via Preferences => Path).

<H3> <A id=s4.1>4.4.1. Using the [declare] object:</A> </H3>

<p>The [declare] object from Pd Vanilla behaves quite similarly to adding
search paths to the user added paths (under Preferences => Path) or adding
libraries (under Preferences => Startup). The difference is that it'll only work
for the patch containing the [declare]. This means that when you add
manually via preferences, it installs it permanently and for any patch.

<H3> <A id=s4.1.1>4.4.1.1. [declare -path]:</A> </H3>

<p>Let's take for an example the ELSE library (<a href="http://github.com/porres/pd-else">http://github.com/porres/pd-else</a>) . This library contains 2
separate binaries and abstractions, so Pd only needs to know its location
path. So we can do something like [declare -path else] and Pd will look for a
folder named else to add it to the search path.

<p>But where does Pd look the else folder? In the locations it knows where
to look (the Relative Path, the Standard Paths or the User Added Paths). So
let's say you downloaded the else library folder into "~/Documents/Pd/
externals", which is the current best practice. Pd will know to look for it there
and will find it!

<H3> <A id=s4.1.2>4.4.1.2. [declare -lib]:</A> </H3>

<p>This is needed for the classic Pd library format, which is a single binary
pack with many externals. One such example is the "zexy" library. So once
you have downloaded it, you can use [declare -lib zexy]. In the same way, Pd
will search for the zexy binary in locations it knows where to look (as in "~/
Documents/Pd/externals").

<p>Does this mean you need to also include the zexy folder path, so Pd
knows to search for the zexy binary inside? Not really, because there's a trick
here. If Pd finda a 'zexy' location, it knows it can look inside it for the 'zexy'
binary, so it will succeed in finding it just with that!

<H3> <A id=s4.2>4.4.2. Using Path and Startup:</A> </H3>

<p>This is basically the same as using [declare] but it will permanently work
every time Pd starts and for any patch.

<H3> <A id=s4.2.1>4.4.2.1. User added Path:</A> </H3>

<p>You can add User Added Paths in Preferences => Path. We've seen
that even if you have a folder into "~/Documents/Pd/externals" you still need
to tell Pd to look for it. You can do this manually added to Pd's search paths
so it can be automatically by clicking "New".

<p>Another possibility is that "Deken"offers a preference tabs where you
can click once on "Should newly installed libraries be added to Pd's search
Path?" to prompt you if you want to add a downloaded library to the user
added search paths after you download it. By default, it never asks you to do
it. You can also click twice so it always add anything you download from
deken to the search path, which is not quite recomended as sometimes you'll
download a single binary pack, where adding it to the search path doesn't
really help.

<H3> <A id=s4.2.2>4.4.2.2. Startup:</A> </H3>

<p>In "Preferences => Startup", you load a window that says <i> "Pd libraries
to load on startup"</i>. This is where you can manually and permanently load
single binary pack libraries. As we've seen with 'zexy', it's common that the
name of the binary is the same as the library's, so you don't need to worry
about setting the path. Another example is the 'cyclone' library,

<p><img src=fig4.5.png >
<p class=fig><i>Figure 4.5 - Loading the cyclone and zexy binaries/libraries in "Startup"</i>

<p>As previously mentioned, cyclone 0.3 is a special case that includes
objects as abstractions, as a <u>set of separate binaries</u> but also has a set a
<u>single binary pack</u> that loads objects with non alphanumeric names, which
need to be loaded as a <u>single binary pack</u> to avoid issues. One particularity of
cylone is that loading its binary will also force Pd to add its path to the search
paths, so you don't need to bother adding it to the path as well so you can
load its abstractions or separate binaries.

<p>It depends on the developer, but it is common and a good practice that
when you load a library, Pd's terminal window will print something to tell us
that the libraries were loaded successfully. Here's a screenshot of the result
of loading cyclone and zexy via the startup (same happens if you load them
via [declare], clearly).

<p><img src=fig4.6.png >
<p class=fig><i>Figure 4.6 - Pd's terminal window after loading cyclone and zexy</i>

<H3> <A id=s4.3>4.4.3. Slash declarations:</A> </H3>

<p>You can also use slash declarations to search for libraries in
paths that are relative to these. For instance, let's say you downloaded the
ELSE library into ~/Documents/Pd/externals, or any other folder Pd will
eventually search for. Instead of using [declare -path] or adding the ELSE
folder to the user added paths, you can just prepend "else/" before an object
name that Pd will try to find this object in a folder called else in one of its
search paths! Here's an example:

<p><img src=fig4.7.png >



<p>Note that if you do that, you can still add the 'else' folder to Pd's search
path or use [declare -path else], but it will just be redundanct. Now, what are
the diffences of this method over using [declare] or adding the path to the
user added paths? The only use case is if you have two externals with the
same name from two different libraries in the same patch. With this method
you can specify which one is which!

<p>A library name prefix may also be pertinent in the context of single
binary packs. The cyclone library has a set of 12 objects with non
alphanumeric names, such as [>~]. But it uses an internal trick of adding a
class creator, so creating the object as [cyclone/>~] also works. But note that
the library still needs to be loaded anyway (via startup or [declare]).

<p>There's also the case where you can find a single binary pack that has
a different name than that of the library. One example is timbreID, which has
a timbreIDLib as the binary file. In this case you need to specify the timbreID
folder with a slash declaration as in "timbreID/timbreiIDLib" in Startup. This
also works in declare as in [declare -lib timbreID/timbreiIDLib].
		 


</BODY>
</HTML>
